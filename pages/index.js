import Head from "next/head";
import styles from "../styles/Home.module.css";
import Header from "../components/Header";
import { useRef, useState } from "react";
import { BiCloudUpload } from "react-icons/bi";
import { AiFillFileText } from "react-icons/ai";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

export default function Home() {
  const [file, setFile] = useState("");
  const [isCompressed, setIsCompressed] = useState(false);
  const [isDecompressed, setIsDecompressed] = useState(false);
  const fileRef = useRef();

  const handleFile = (e) => {
    let file = e.target.files[0];
    if (file) {
      setIsCompressed(false);
      setIsDecompressed(false);
      setFile(file);
    }
  };

  const compressFile = () => {
    if (!file) {
      toast.error("Please Upload a file to Compress", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "dark",
      });
      return;
    }

    const data = new FormData();

    data.append("file", file);
    data.append("filename", file.name);

    fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/compress`, {
      method: "POST",
      body: data,
      referrerPolicy: "unsafe-url",
    })
      .then((res) => {
        return res.json();
      })
      .then((data) => {
        if (data.success) {
          toast("File Successfully Compressed", {
            position: "top-right",
            autoClose: 5000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
            theme: "dark",
          });
          setIsCompressed(true);
        } else {
          toast.error(data.message, {
            position: "top-right",
            autoClose: 5000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
            theme: "dark",
          });
        }
      });
  };

  const decompressFile = () => {
    if (!isCompressed) {
      toast.error("Please Upload or Compress a file to Decompress", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "dark",
      });
      return;
    }

    fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/decompress/${file.name}`, {
      referrerPolicy: "unsafe-url",
    })
      .then((res) => res.json())
      .then((data) => {
        if (data.success) {
          toast("File Successfully Decompressed", {
            position: "top-right",
            autoClose: 5000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
            theme: "dark",
          });
          setIsDecompressed(true);
        }
      });
  };

  const clearInput = () => {
    fileRef.current.value = "";
    setIsCompressed(false);
    setIsDecompressed(false);
    setFile(null);
  };

  return (
    <div className={styles.container}>
      <ToastContainer
        position="top-right"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="dark"
      />
      <Head>
        <title>File Compressor</title>
        <meta name="description" content="Generated by create next app" />
        <meta
          http-equiv="Content-Security-Policy"
          content="upgrade-insecure-requests"
        />
        <link rel="icon" href="/logo.webp" />
      </Head>
      <Header />
      <div className={styles.wrapper}>
        <label className={styles.fileLabel}>
          <input
            type="file"
            onInput={handleFile}
            className={styles.fileInput}
            ref={fileRef}
          />
          {file ? (
            <>
              <AiFillFileText className={styles.uploadIcon} />
              <p>Your File is Ready to be Compressed!</p>
            </>
          ) : (
            <>
              {" "}
              <BiCloudUpload className={styles.uploadIcon} />
              <p>Upload a File to Compress...</p>
            </>
          )}
        </label>
        <button className={styles.clearBtn} onClick={clearInput}>
          Clear Input
        </button>
        <div className={styles.btns}>
          <div>
            <button onClick={compressFile}>Compress</button>
            <div
              style={{ cursor: "pointer" }}
              onClick={() => {
                if (!isCompressed) {
                  toast.error("Please Compress a file First", {
                    position: "top-right",
                    autoClose: 5000,
                    hideProgressBar: false,
                    closeOnClick: true,
                    pauseOnHover: true,
                    draggable: true,
                    progress: undefined,
                    theme: "dark",
                  });
                }
              }}
            >
              <a
                href={`${process.env.NEXT_PUBLIC_BACKEND_URL}/download/file/${file?.name}/binary`}
                referrerPolicy="unsafe-url"
                download
                style={!isCompressed ? { pointerEvents: "none" } : {}}
              >
                Download Compressed File
              </a>
            </div>
          </div>
          <div>
            <button onClick={decompressFile}>Decompress</button>
            <div
              style={{ cursor: "pointer" }}
              onClick={() => {
                if (!isDecompressed) {
                  toast.error("Please Decompress the file First", {
                    position: "top-right",
                    autoClose: 5000,
                    hideProgressBar: false,
                    closeOnClick: true,
                    pauseOnHover: true,
                    draggable: true,
                    progress: undefined,
                    theme: "dark",
                  });
                }
              }}
            >
              <a
                href={`${process.env.NEXT_PUBLIC_BACKEND_URL}/download/file/${file?.name}/text`}
                referrerPolicy="unsafe-url"
                style={!isDecompressed ? { pointerEvents: "none" } : {}}
                download
              >
                Download Decompressed File
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
